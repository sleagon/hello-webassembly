import * as React from 'react';
import add from './wasm/add';
import uuid from './wasm/uuid';

import './app.scss';

// info is pretty complicated here, try to use the code from js generated by emcc.
// const info = {
//   env: {
//     __memory_base: 1024,
//     __table_base: 0,
//     memory: new WebAssembly.Memory({ initial: 100, limit: 1000 }),
//     table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' }),
//     abortStackOverflow: allocSize => {
//       alert(1);
//     },
//     nullFunc_ii: (...args) => console.log(...args),
//     nullFunc_iiii: (...args) => console.log(...args),
//     ___lock: (...args) => console.log(...args),
//     ___setErrNo: (...args) => console.log(...args),
//     ___syscall140: (...args) => console.log(...args),
//     ___syscall146: (...args) => console.log(...args),
//     ___syscall54: (...args) => console.log(...args),
//   },
//   global: {
//     NaN: NaN,
//     Infinity: Infinity,
//   },
//   'global.Math': Math,
//   asm2wasm: {
//     // special asm2wasm imports
//     'f64-rem': function(x, y) {
//       return x % y;
//     },
//     debugger: function() {
//       debugger;
//     },
//   },
// };

export default class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: '? + ? = ?',
      ready: false,
    };
    this.init();
  }
  async init() {
    let module = await add();
    this.add = module.instance.exports.add;
    // module = await uuid(info);
    // this.uuid = module.instance.exports.uuid;
    // console.log(this.uuid());
    this.setState({
      ready: true,
    });
  }
  onClick = async () => {
    if (!this.state.ready) {
      alert('webassembly is not ready yet.');
      return;
    }
    const x = Math.random() * 100;
    const y = Math.random() * 200;
    // const offset = this.uuid();
    // let uuid = '';
    // for (let k = 0; k < 32; k++) {
    //   uuid += String.fromCharCode(Module.HEAP8[offset + k]);
    // }
    // this.setState({
    //   uuid,
    // });
    this.setState({
      text: `${x} + ${y} = ${this.add(x, y)}`
    });
  };
  render() {
    const { text } = this.state;
    return (
      <div>
        <h1 className="page-header">this is a simple test for webassembly in webpack.</h1>
        <button className="btn" onClick={this.onClick} >click me.</button>
        <div className="uuid-text">{text}</div>
      </div>
    );
  }
}
